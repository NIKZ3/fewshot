const express = require("express");
const userRouter = new express.Router();
const user = require("../models/user");
const fs = require("fs");
const { spawn } = require("child_process");
const multer = require("multer");
const auth = require("../middleware/auth");
const path = require("path");

userRouter.post("/register", async (req, res) => {
    try {
        const user1 = new user({
            userID: req.body.userID,
            password: req.body.password,
        });
        await user1.save();
        const token = await user1.generateAuthToken();
        let dir = path.join(__dirname, "../");
        dir = path.join(dir, "/public/users");
        fs.mkdir(path.join(dir, "user1._id"), () => {
            console.log("Directory Created");
        });
        res.status(200).send({ data: "User Creation Success", token: token });
    } catch (e) {
        console.log(e);
        res.status(500).send({ error: "User Creation Failed" });
    }
});

userRouter.post("/login", auth, async (req, res) => {
    try {
        if (req.userID !== undefined) {
            console.log(req.userID);
            res.status(200).send({ data: "Already logged IN" });
        } else {
            const user1 = await user.findOne({ userID: req.body.userID });
            if (user1 === undefined || user1 === null) {
                res.status(401).send({ data: "No user Present" });
            } else {
                if (req.body.password === user1.password) {
                    const token = await user1.generateAuthToken();
                    res.status(200).send({
                        data: "User Creation Success",
                        token: token,
                    });
                } else {
                    res.status(401).send({ data: "Incorrect password" });
                }
            }
        }
    } catch (e) {
        console.log(e);
        res.status(500).send({ error: "Server Error" });
    }
});

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, path.join(__dirname, "../public/cache"));
    },

    filename: function (req, file, cb) {
        cb(null, Date.now() + "-" + file.fieldname);
    },
});

const upload = multer({
    storage: storage,
}).single("image");

//!Change route name as required
userRouter.post("/inference", auth, async (req, res) => {
    try {
        upload(req, res, async (err) => {
            if (err instanceof multer.MulterError) {
                console.log("==========");
                let err = new Error("File Upload Error/Server");
                err.status = 500;
                console.log(err);
                res.statusCode = 500;
                res.send({ err: err });
            } else if (req.file === undefined) {
                res.statusCode = 404;
                res.setHeader("Content-Type", "application/json");
                res.send({ code: 404, message: "File not found" });
            } else {
                //!Pass image path and directory path user to python script it will
                //!generate the output which will sent back to user
                res.status(200).send({ data: "ok" });
                /*const dir = path.join(__dirname, "../");
                dir = path.join(dir, "/public/users");
                dir = path.join(dir, req._id);//Dir of user
          
                const scriptPath //Model script

                const script = spawn("python",[scriptPath,dir,req.file.path]) //req.file.path is the image for which inference is to be generated
                
                script.stdout.on("data", function (data) {
                    dataToSend = data.toString();
                    console.log(dataToSend)
                });
                script.on("close", (code) => {
                    console.log("Script ran succcessfully")

                    res.status(200).send({data:"ok"}) //send the inference file generated by script
                })*/
            }
        });
    } catch (e) {
        console.log(e);
        res.status(500).send({ error: "Server Error" });
    }
});

module.exports = userRouter;
